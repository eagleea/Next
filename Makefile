TARFILES = Makefile scanner.mll parser.mly ast.mli expression.ml declaration.ml action.ml selection.ml start.ml statement.ml compile.ml next.ml

OBJS = parser.cmo scanner.cmo expression.cmo declaration.cmo action.cmo selection.cmo start.cmo statement.cmo compile.cmo next.cmo
LIBPATH = -I +sdl

next : $(OBJS)
	ocamlc -o next $(OBJS)

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc -v parser.mly

%.cmo : %.ml
	ocamlc -c $(LIBPATH) $<

%.cmi : %.mli
	ocamlc -c $(LIBPATH) $<

next.tar.gz : $(TARFILES)
	cd .. && tar zcf next/next.tar.gz $(TARFILES:%=next/%)

.PHONY : clean
clean :
	rm -f next parser.ml parser.mli scanner.ml *.cmo *.cmi *.class

# Generated by ocamldep *.ml *.mli
action.cmo:
action.cmx:
compile.cmo: statement.cmo start.cmo selection.cmo expression.cmo \
    declaration.cmo ast.cmi action.cmo
compile.cmx: statement.cmx start.cmx selection.cmx expression.cmx \
    declaration.cmx ast.cmi action.cmx
declaration.cmo: expression.cmo ast.cmi
declaration.cmx: expression.cmx ast.cmi
expression.cmo: ast.cmi
expression.cmx: ast.cmi
next.cmo: scanner.cmo parser.cmi compile.cmo ast.cmi
next.cmx: scanner.cmx parser.cmx compile.cmx ast.cmi
parser.cmo: ast.cmi parser.cmi
parser.cmx: ast.cmi parser.cmi
scanner.cmo: parser.cmi
scanner.cmx: parser.cmx
selection.cmo: ast.cmi
selection.cmx: ast.cmi
start.cmo: ast.cmi
start.cmx: ast.cmi
statement.cmo: ast.cmi
statement.cmx: ast.cmi
ast.cmi:
parser.cmi: ast.cmi